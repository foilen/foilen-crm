buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
}
plugins {
    id "com.github.ben-manes.versions" version "$versionsVersion"
    id 'com.github.node-gradle.node' version '7.1.0'
    id 'io.spring.dependency-management' version "$springDependencyManagementVersion"
    id 'org.springframework.boot' version "$springBootVersion"
}

apply plugin: 'java'

group = 'com.foilen'
version = System.getenv('VERSION') ?: 'master-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = 21

dependencies {

    // Databases
    implementation "com.mysql:mysql-connector-j:9.3.0"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-jdbc"

    // Emails
    implementation 'com.itextpdf:html2pdf:5.0.5'
    implementation 'jakarta.mail:jakarta.mail-api:2.1.3'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.freemarker:freemarker'

    // Web
    implementation "org.springframework.boot:spring-boot-starter-freemarker"
    implementation "org.springframework.boot:spring-boot-starter-web"

    // Spring
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springdocOpenApiVersion"
    implementation "org.springframework:spring-context"
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation "org.springframework.retry:spring-retry"
    implementation 'org.springframework.security:spring-security-web'

    // Login
    implementation 'com.azure.spring:spring-cloud-azure-starter-active-directory'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // Misc
    implementation "args4j:args4j:$argsVersion"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "com.foilen:jl-smalltools-hibernate63:$smalltoolsVersion"
    implementation "com.foilen:jl-smalltools-spring:$smalltoolsVersion"
    implementation "commons-validator:commons-validator:$commonsValidatorVersion"
    implementation "org.apache.commons:commons-text:$commonsTextVersion"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:4.0.2"
    implementation 'org.quartz-scheduler:quartz'

    // Test
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.vintage:junit-vintage-engine'
    testImplementation "org.springframework:spring-test"
    testImplementation "org.springframework.boot:spring-boot-starter-test"

}

dependencyManagement {
    imports {
        mavenBom "com.azure.spring:spring-cloud-azure-dependencies:${springCloudAzureVersion}"
    }
}

apply plugin: 'application'
mainClassName = 'com.foilen.crm.CrmApp'
jar {
    enabled = true
}

bootJar {
    archiveClassifier.set('boot')
}

// NodeJS
if (!System.getenv().containsKey('SKIP_NODEJS')) {
    node {
        download = true
        nodeProjectDir = file("${project.projectDir}/src/main/ui")
    }

    task copyNodeBuildFiles(type: Copy) {
        from "${project.projectDir}/src/main/ui/build"
        into "${project.projectDir}/build/resources/main/static"
    }

    // npmInstall -> npm_run_build -> copyNodeBuildFiles
    tasks.bootJar.dependsOn copyNodeBuildFiles
    tasks.compileJava.dependsOn copyNodeBuildFiles
    tasks.copyNodeBuildFiles.dependsOn tasks.npm_run_build
    tasks.npm_run_build.dependsOn tasks.npmInstall

    // Start webui
    task npmRunWatch(type: NpmTask) {
        args = ['run', 'watch']
    }
}
